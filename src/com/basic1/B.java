package com.basic1;//패키지명을 선언합니다.
//만일 패키지명이 다르면 클래스에 접근이 안되는 경우도 있으니 패키지명도 지켜줘야함

//클래스 선언시 public을 붙여서 선언하면 패키지가 다르더라도 접근이 가능해짐
//클래스를 선언해야 그 안에 변수와 메소드를 선언할 수 있어요
//클래스를 선언할 때는 좌중괄호와 우중괄호를 사용해야 함
public class B {
	//이 안에서만 코드를 추가해야 해요. 왜냐하면 어떤 클래스가 소유하고 있는
	//변수인지 또 메소드인지를 알아야 하니까요. 꼭 지켜줍시다.
	//insert here - 사각형의 면적을 구하기 위해서 필요한 변수를 선언해보시오.
	//가로 * 세로를 하면 사각형의 면적을 구해준다
	int width = 10;//가로 길이를 담을 변수 선언 및 초기화 까지 진행함
	int height = 2;//세로 길이를 담을 변수 선언 및 초기화 까지 진행함
	//초기화를 나중에 따로 할 수도 있음 - 단 선언부에서는 불가함.
	
	//아무리 많은 코드를 작성하더라도 JVM은 main메소드를 가장 먼저 읽어 들입니다.
	//개발자가 무엇을 요구하는지를 정보를 수집해서 메모리에 올릴것은 올리고
	//초기화 할것은 해야 하고 또 참조해야 하는 클래스가 실제로 존재하고 있는지 파악도
	//해야 하구요. 그래서 미리 실행을 하기전에 사전에 준비를 해두는 거죠.
	//메인메소드는 클래스 선언 안에 어디에 있든 상관없은 없어요.
	//그러나 앞으로 재사용이 가능한. 그래서 모듈화를 통해서 레고블럭처럼
	//재사용이 가능하도록 코드를 전개 하려면 클래스를 나누고 메소드를 분리하는 것이 필요함
	//그래서 메인메소드안에는 최소한의 코드만 작성해야 함
	public static void main(String[] args) {
		B b = new B();
		int area = b.width * b.height;
		//문자열 +숫자는 붙여쓰기가 발동함
		System.out.println("사각형의 면적은 "+ area + " 입니다. ");
		System.out.println("10"+10);//1010출력됨
		System.out.println(10+10);//20이 출력됨
	}

}
